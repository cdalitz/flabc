// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "dialogs_msk.h"
#include <FL/Fl_Color_Chooser.H>

void OptionsLook_msk::cb_backgroundcolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_backgroundcolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->user_data()))->cb_backgroundcolor_i(o,v);
}

void OptionsLook_msk::cb_selectioncolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_selectioncolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->user_data()))->cb_selectioncolor_i(o,v);
}

void OptionsLook_msk::cb_Change_i(Fl_Button*, void*) {
  getfont_cb(romanfont, &romanfontnum);
}
void OptionsLook_msk::cb_Change(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Change_i(o,v);
}

void OptionsLook_msk::cb_Change1_i(Fl_Button*, void*) {
  getfont_cb(boldfont, &boldfontnum);
}
void OptionsLook_msk::cb_Change1(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Change1_i(o,v);
}

void OptionsLook_msk::cb_Change2_i(Fl_Button*, void*) {
  getfont_cb(italicfont, &italicfontnum);
}
void OptionsLook_msk::cb_Change2(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Change2_i(o,v);
}

void OptionsLook_msk::cb_Change3_i(Fl_Button*, void*) {
  getfont_cb(bolditalicfont, &bolditalicfontnum);
}
void OptionsLook_msk::cb_Change3(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Change3_i(o,v);
}

void OptionsLook_msk::cb_Acolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_Acolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Acolor_i(o,v);
}

void OptionsLook_msk::cb_Bcolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_Bcolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Bcolor_i(o,v);
}

void OptionsLook_msk::cb_Ccolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_Ccolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Ccolor_i(o,v);
}

void OptionsLook_msk::cb_Dcolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_Dcolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Dcolor_i(o,v);
}

void OptionsLook_msk::cb_Ecolor_i(Fl_Button* o, void*) {
  getbuttoncolor(o);
}
void OptionsLook_msk::cb_Ecolor(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->parent()->user_data()))->cb_Ecolor_i(o,v);
}

void OptionsLook_msk::cb_Apply_i(Fl_Button*, void*) {
  buttonapply_cb();
}
void OptionsLook_msk::cb_Apply(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

void OptionsLook_msk::cb_Reset_i(Fl_Button*, void*) {
  buttonreset_cb();
}
void OptionsLook_msk::cb_Reset(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->user_data()))->cb_Reset_i(o,v);
}

void OptionsLook_msk::cb_Quit_i(Fl_Button*, void*) {
  buttonquit_cb();
}
void OptionsLook_msk::cb_Quit(Fl_Button* o, void* v) {
  ((OptionsLook_msk*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

OptionsLook_msk::OptionsLook_msk(MainWin* mw) {
  { window = new Fl_Double_Window(456, 546, "Options Look & Feel");
    window->user_data((void*)(this));
    { fontsize = new Fl_Spinner(132, 16, 40, 24, "Font Size:");
    } // Fl_Spinner* fontsize
    { backgroundcolor = new Fl_Button(65, 51, 19, 20, "Background Color");
      backgroundcolor->box(FL_BORDER_BOX);
      backgroundcolor->color((Fl_Color)1);
      backgroundcolor->callback((Fl_Callback*)cb_backgroundcolor);
      backgroundcolor->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Button* backgroundcolor
    { selectioncolor = new Fl_Button(65, 83, 19, 20, "Selection Color");
      selectioncolor->box(FL_BORDER_BOX);
      selectioncolor->color((Fl_Color)1);
      selectioncolor->callback((Fl_Callback*)cb_selectioncolor);
      selectioncolor->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Button* selectioncolor
    { scheme = new Fl_Choice(275, 17, 115, 25, "Scheme:");
      scheme->down_box(FL_BORDER_BOX);
    } // Fl_Choice* scheme
    { visiblefocus = new Fl_Check_Button(224, 50, 110, 25, "Visible Focus");
      visiblefocus->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* visiblefocus
    { abcnodeadkeys = new Fl_Check_Button(224, 80, 176, 25, "^ and ~ no dead keys");
      abcnodeadkeys->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* abcnodeadkeys
    { Fl_Group* o = new Fl_Group(15, 120, 425, 150, "Fonts");
      o->box(FL_EMBOSSED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { romanfont = new Fl_Output(92, 134, 240, 21, "Roman:");
      } // Fl_Output* romanfont
      { Fl_Button* o = new Fl_Button(345, 131, 75, 25, "Change");
        o->callback((Fl_Callback*)cb_Change);
      } // Fl_Button* o
      { boldfont = new Fl_Output(92, 168, 240, 21, "Bold:");
      } // Fl_Output* boldfont
      { Fl_Button* o = new Fl_Button(345, 165, 75, 25, "Change");
        o->callback((Fl_Callback*)cb_Change1);
      } // Fl_Button* o
      { italicfont = new Fl_Output(92, 204, 240, 21, "Italic:");
      } // Fl_Output* italicfont
      { Fl_Button* o = new Fl_Button(345, 201, 75, 25, "Change");
        o->callback((Fl_Callback*)cb_Change2);
      } // Fl_Button* o
      { bolditalicfont = new Fl_Output(92, 238, 240, 21, "Bold Italic:");
      } // Fl_Output* bolditalicfont
      { Fl_Button* o = new Fl_Button(345, 235, 75, 25, "Change");
        o->callback((Fl_Callback*)cb_Change3);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 293, 425, 191, "Highlight Styles");
      o->box(FL_EMBOSSED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      { Fl_Box* o = new Fl_Box(60, 318, 30, 16, "Plain");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Acolor = new Fl_Button(151, 317, 19, 20, "Color");
        Acolor->box(FL_BORDER_BOX);
        Acolor->color((Fl_Color)1);
        Acolor->callback((Fl_Callback*)cb_Acolor);
        Acolor->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Button* Acolor
      { Abold = new Fl_Check_Button(229, 319, 64, 15, "Bold");
        Abold->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Abold
      { Aitalic = new Fl_Check_Button(306, 319, 70, 15, "Italic");
        Aitalic->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Aitalic
      { Fl_Box* o = new Fl_Box(59, 346, 30, 16, "Comments");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Bcolor = new Fl_Button(151, 345, 19, 20, "Color");
        Bcolor->box(FL_BORDER_BOX);
        Bcolor->color((Fl_Color)1);
        Bcolor->callback((Fl_Callback*)cb_Bcolor);
        Bcolor->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Button* Bcolor
      { Bbold = new Fl_Check_Button(229, 347, 64, 15, "Bold");
        Bbold->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Bbold
      { Bitalic = new Fl_Check_Button(306, 347, 70, 15, "Italic");
        Bitalic->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Bitalic
      { Fl_Box* o = new Fl_Box(59, 376, 30, 16, "Info Fields");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Ccolor = new Fl_Button(151, 375, 19, 20, "Color");
        Ccolor->box(FL_BORDER_BOX);
        Ccolor->color((Fl_Color)1);
        Ccolor->callback((Fl_Callback*)cb_Ccolor);
        Ccolor->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Button* Ccolor
      { Cbold = new Fl_Check_Button(229, 377, 64, 15, "Bold");
        Cbold->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Cbold
      { Citalic = new Fl_Check_Button(306, 377, 70, 15, "Italic");
        Citalic->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Citalic
      { Fl_Box* o = new Fl_Box(59, 406, 30, 16, "Voice Fields");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Dcolor = new Fl_Button(151, 405, 19, 20, "Color");
        Dcolor->box(FL_BORDER_BOX);
        Dcolor->color((Fl_Color)1);
        Dcolor->callback((Fl_Callback*)cb_Dcolor);
        Dcolor->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Button* Dcolor
      { Dbold = new Fl_Check_Button(229, 407, 64, 15, "Bold");
        Dbold->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Dbold
      { Ditalic = new Fl_Check_Button(306, 407, 70, 15, "Italic");
        Ditalic->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Ditalic
      { Fl_Box* o = new Fl_Box(59, 435, 30, 16, "Bar Lines");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Ecolor = new Fl_Button(151, 434, 19, 20, "Color");
        Ecolor->box(FL_BORDER_BOX);
        Ecolor->color((Fl_Color)1);
        Ecolor->callback((Fl_Callback*)cb_Ecolor);
        Ecolor->align(Fl_Align(FL_ALIGN_RIGHT));
      } // Fl_Button* Ecolor
      { Ebold = new Fl_Check_Button(229, 436, 64, 15, "Bold");
        Ebold->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Ebold
      { Eitalic = new Fl_Check_Button(306, 436, 70, 15, "Italic");
        Eitalic->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* Eitalic
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(73, 497, 70, 35, "Apply");
      o->callback((Fl_Callback*)cb_Apply);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(182, 497, 70, 35, "Reset");
      o->callback((Fl_Callback*)cb_Reset);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(288, 497, 70, 35, "Quit");
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  scheme->add("plastic",0,0);
  scheme->add("none",0,0);
  scheme->add("gtk+",0,0);
  scheme->add("gleam",0,0);
}

OptionsLook_msk::~OptionsLook_msk() {
  delete window;
}

void OptionsLook_msk::buttonquit_cb() {
  window->hide();
}

void OptionsLook_msk::getbuttoncolor(Fl_Button* button) {
  uchar r,g,b;
  Fl::get_color(button->color(),r,g,b);
  if (fl_color_chooser("Pick Color", r, g, b)) {
    button->color(fl_rgb_color(r,g,b));
    button->selection_color(fl_rgb_color(r,g,b));
    button->redraw();
  }
}

void OptionsLook_msk::show() {
  window->show();
}

void OptionsBehaviour_msk::cb_Apply1_i(Fl_Button*, void*) {
  buttonapply_cb();
}
void OptionsBehaviour_msk::cb_Apply1(Fl_Button* o, void* v) {
  ((OptionsBehaviour_msk*)(o->parent()->user_data()))->cb_Apply1_i(o,v);
}

void OptionsBehaviour_msk::cb_Reset1_i(Fl_Button*, void*) {
  buttonreset_cb();
}
void OptionsBehaviour_msk::cb_Reset1(Fl_Button* o, void* v) {
  ((OptionsBehaviour_msk*)(o->parent()->user_data()))->cb_Reset1_i(o,v);
}

void OptionsBehaviour_msk::cb_Quit1_i(Fl_Button*, void*) {
  buttonquit_cb();
}
void OptionsBehaviour_msk::cb_Quit1(Fl_Button* o, void* v) {
  ((OptionsBehaviour_msk*)(o->parent()->user_data()))->cb_Quit1_i(o,v);
}

OptionsBehaviour_msk::OptionsBehaviour_msk(MainWin* mw) {
  { window = new Fl_Double_Window(346, 266, "Options Behaviour");
    window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(30, 205, 70, 35, "Apply");
      o->callback((Fl_Callback*)cb_Apply1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(139, 205, 70, 35, "Reset");
      o->callback((Fl_Callback*)cb_Reset1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(245, 205, 70, 35, "Quit");
      o->callback((Fl_Callback*)cb_Quit1);
    } // Fl_Button* o
    { askonexit = new Fl_Check_Button(55, 24, 245, 25, "Ask on exit when buffer changed");
      askonexit->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* askonexit
    { takecareofshebang = new Fl_Check_Button(54, 158, 241, 29, "Take care of %! line");
      takecareofshebang->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* takecareofshebang
    { Fl_Group* o = new Fl_Group(35, 78, 270, 70, "default abc2ps program");
      o->box(FL_EMBOSSED_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { abctab2ps = new Fl_Round_Button(55, 91, 106, 19, "abctab2ps");
        abctab2ps->type(102);
        abctab2ps->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* abctab2ps
      { abcm2ps = new Fl_Round_Button(55, 116, 106, 19, "abcm2ps");
        abcm2ps->type(102);
        abcm2ps->down_box(FL_ROUND_DOWN_BOX);
      } // Fl_Round_Button* abcm2ps
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

OptionsBehaviour_msk::~OptionsBehaviour_msk() {
  delete window;
}

void OptionsBehaviour_msk::buttonquit_cb() {
  window->hide();
}

void OptionsBehaviour_msk::show() {
  window->show();
}

void OptionsSystem_msk::cb_Apply2_i(Fl_Button*, void*) {
  buttonapply_cb();
}
void OptionsSystem_msk::cb_Apply2(Fl_Button* o, void* v) {
  ((OptionsSystem_msk*)(o->parent()->user_data()))->cb_Apply2_i(o,v);
}

void OptionsSystem_msk::cb_Reset2_i(Fl_Button*, void*) {
  buttonreset_cb();
}
void OptionsSystem_msk::cb_Reset2(Fl_Button* o, void* v) {
  ((OptionsSystem_msk*)(o->parent()->user_data()))->cb_Reset2_i(o,v);
}

void OptionsSystem_msk::cb_Quit2_i(Fl_Button*, void*) {
  buttonquit_cb();
}
void OptionsSystem_msk::cb_Quit2(Fl_Button* o, void* v) {
  ((OptionsSystem_msk*)(o->parent()->user_data()))->cb_Quit2_i(o,v);
}

OptionsSystem_msk::OptionsSystem_msk(MainWin* mw) {
  { window = new Fl_Double_Window(590, 440, "Options System Environment");
    window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(45, 385, 70, 35, "Apply");
      o->callback((Fl_Callback*)cb_Apply2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(154, 385, 70, 35, "Reset");
      o->callback((Fl_Callback*)cb_Reset2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(425, 385, 70, 35, "Quit");
      o->callback((Fl_Callback*)cb_Quit2);
    } // Fl_Button* o
    { Fl_Tabs* o = new Fl_Tabs(4, 5, 581, 370);
      { Fl_Group* o = new Fl_Group(4, 30, 571, 337, "abctab");
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { abctab2ps = new noarrow_Fl_Input(29, 57, 526, 24, "abctab2ps Command:");
          abctab2ps->box(FL_DOWN_BOX);
          abctab2ps->color(FL_BACKGROUND2_COLOR);
          abctab2ps->selection_color(FL_SELECTION_COLOR);
          abctab2ps->labeltype(FL_NORMAL_LABEL);
          abctab2ps->labelfont(0);
          abctab2ps->labelsize(14);
          abctab2ps->labelcolor(FL_FOREGROUND_COLOR);
          abctab2ps->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          abctab2ps->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* abctab2ps
        { abcm2ps = new noarrow_Fl_Input(29, 101, 526, 24, "abcm2ps Command:");
          abcm2ps->box(FL_DOWN_BOX);
          abcm2ps->color(FL_BACKGROUND2_COLOR);
          abcm2ps->selection_color(FL_SELECTION_COLOR);
          abcm2ps->labeltype(FL_NORMAL_LABEL);
          abcm2ps->labelfont(0);
          abcm2ps->labelsize(14);
          abcm2ps->labelcolor(FL_FOREGROUND_COLOR);
          abcm2ps->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          abcm2ps->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* abcm2ps
        { Fl_Box* o = new Fl_Box(30, 130, 530, 54, "Commands for abc to postscript conversion. When it is installed in your PATH,\
 the basename is sufficient. Otherwise specify the full path; when this path c\
ontains spaces, put quotes around the path.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { abctabfonts = new noarrow_Fl_Input(29, 207, 526, 24, "Special abctab Font Directories:");
          abctabfonts->box(FL_DOWN_BOX);
          abctabfonts->color(FL_BACKGROUND2_COLOR);
          abctabfonts->selection_color(FL_SELECTION_COLOR);
          abctabfonts->labeltype(FL_NORMAL_LABEL);
          abctabfonts->labelfont(0);
          abctabfonts->labelsize(14);
          abctabfonts->labelcolor(FL_FOREGROUND_COLOR);
          abctabfonts->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          abctabfonts->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* abctabfonts
        { Fl_Box* o = new Fl_Box(30, 236, 525, 39, "Semicolon separated list of directories with additional tablature fonts. By d\
efault abctab2ps only looks in /usr/[local/]share/abctab2ps.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { abctmpfile = new noarrow_Fl_Input(29, 294, 526, 24, "Temporary abc File:");
          abctmpfile->box(FL_DOWN_BOX);
          abctmpfile->color(FL_BACKGROUND2_COLOR);
          abctmpfile->selection_color(FL_SELECTION_COLOR);
          abctmpfile->labeltype(FL_NORMAL_LABEL);
          abctmpfile->labelfont(0);
          abctmpfile->labelsize(14);
          abctmpfile->labelcolor(FL_FOREGROUND_COLOR);
          abctmpfile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          abctmpfile->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* abctmpfile
        { Fl_Box* o = new Fl_Box(30, 325, 525, 35, "Filename to which single tunes (eg. for \"Abc/Preview Tune\") are written. Ma\
ke sure it is writable (and user specific on a multi user system).");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(4, 30, 576, 335, "Postscript");
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { psviewer = new noarrow_Fl_Input(38, 76, 507, 24, "PS Viewing Command (Linux and OSX only):");
          psviewer->box(FL_DOWN_BOX);
          psviewer->color(FL_BACKGROUND2_COLOR);
          psviewer->selection_color(FL_SELECTION_COLOR);
          psviewer->labeltype(FL_NORMAL_LABEL);
          psviewer->labelfont(0);
          psviewer->labelsize(14);
          psviewer->labelcolor(FL_FOREGROUND_COLOR);
          psviewer->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          psviewer->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* psviewer
        { Fl_Box* o = new Fl_Box(40, 111, 505, 79, "Command for viewing postscript files to which the filename will be appended. \
When specifying a full path including spaces, put quotes around the path. Note\
: On Windows this command is ignored and postscript files are opened with the \
associated postscript viewer (via ShellExecute).");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { pstmpfile = new noarrow_Fl_Input(38, 222, 507, 24, "Temporary PS Output File:");
          pstmpfile->box(FL_DOWN_BOX);
          pstmpfile->color(FL_BACKGROUND2_COLOR);
          pstmpfile->selection_color(FL_SELECTION_COLOR);
          pstmpfile->labeltype(FL_NORMAL_LABEL);
          pstmpfile->labelfont(0);
          pstmpfile->labelsize(14);
          pstmpfile->labelcolor(FL_FOREGROUND_COLOR);
          pstmpfile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          pstmpfile->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* pstmpfile
        { Fl_Box* o = new Fl_Box(40, 259, 505, 43, "Filename to which postscript output from abctab2ps is written. Make sure it i\
s writable (and user specific on a multi user system).");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(4, 30, 571, 335, "Midi");
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { abc2midi = new noarrow_Fl_Input(32, 61, 518, 24, "abc2midi Command:");
          abc2midi->box(FL_DOWN_BOX);
          abc2midi->color(FL_BACKGROUND2_COLOR);
          abc2midi->selection_color(FL_SELECTION_COLOR);
          abc2midi->labeltype(FL_NORMAL_LABEL);
          abc2midi->labelfont(0);
          abc2midi->labelsize(14);
          abc2midi->labelcolor(FL_FOREGROUND_COLOR);
          abc2midi->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          abc2midi->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* abc2midi
        { Fl_Box* o = new Fl_Box(33, 91, 517, 54, "Command for abc to midi conversion. When it is installed in your PATH, the ba\
sename is sufficient. Otherwise specify the full path; when this path contains\
 spaces, put quotes around the path.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { midiplayer = new noarrow_Fl_Input(31, 171, 519, 24, "MidiPlayer Command (Linux only):");
          midiplayer->box(FL_DOWN_BOX);
          midiplayer->color(FL_BACKGROUND2_COLOR);
          midiplayer->selection_color(FL_SELECTION_COLOR);
          midiplayer->labeltype(FL_NORMAL_LABEL);
          midiplayer->labelfont(0);
          midiplayer->labelsize(14);
          midiplayer->labelcolor(FL_FOREGROUND_COLOR);
          midiplayer->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          midiplayer->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* midiplayer
        { Fl_Box* o = new Fl_Box(30, 201, 525, 57, "On Windows or OSX midi files are opened with the associated application (via \
ShellExecute or open). On Linux you must specify the command for opening midi \
files; the midi filename will be appended to the end.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { miditmpfile = new noarrow_Fl_Input(30, 281, 520, 24, "Temporary Midi File:");
          miditmpfile->box(FL_DOWN_BOX);
          miditmpfile->color(FL_BACKGROUND2_COLOR);
          miditmpfile->selection_color(FL_SELECTION_COLOR);
          miditmpfile->labeltype(FL_NORMAL_LABEL);
          miditmpfile->labelfont(0);
          miditmpfile->labelsize(14);
          miditmpfile->labelcolor(FL_FOREGROUND_COLOR);
          miditmpfile->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          miditmpfile->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* miditmpfile
        { Fl_Box* o = new Fl_Box(30, 311, 520, 43, "Filename to which midi output from abc2midi is written. Make sure it is writa\
ble (and user specific on a multi user system).");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(4, 30, 576, 335, "Documentation");
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { docdirs = new noarrow_Fl_Input(35, 80, 500, 24, "Documentation Directories:");
          docdirs->box(FL_DOWN_BOX);
          docdirs->color(FL_BACKGROUND2_COLOR);
          docdirs->selection_color(FL_SELECTION_COLOR);
          docdirs->labeltype(FL_NORMAL_LABEL);
          docdirs->labelfont(0);
          docdirs->labelsize(14);
          docdirs->labelcolor(FL_FOREGROUND_COLOR);
          docdirs->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          docdirs->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* docdirs
        { Fl_Box* o = new Fl_Box(35, 115, 505, 63, "Semicolon separated list of directories that are searched for documentaton eg\
. when the menu \"Help/Abctab2ps User\'s Guide\" is invoked. The user\'s guide\
 is search in the subdirectory doc/userguide.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { webbrowser = new noarrow_Fl_Input(35, 216, 505, 24, "Webbrowsers (Linux only):");
          webbrowser->box(FL_DOWN_BOX);
          webbrowser->color(FL_BACKGROUND2_COLOR);
          webbrowser->selection_color(FL_SELECTION_COLOR);
          webbrowser->labeltype(FL_NORMAL_LABEL);
          webbrowser->labelfont(0);
          webbrowser->labelsize(14);
          webbrowser->labelcolor(FL_FOREGROUND_COLOR);
          webbrowser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          webbrowser->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* webbrowser
        { Fl_Box* o = new Fl_Box(34, 252, 511, 76, "On Windows or OSX html files are opened with the associated application (via \
ShellExecute or open). On Linux you must specify a semicolon separated list of\
 webbrowsers. flabc will pick the first from the list that is installed on you\
r system.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(14, 40, 571, 335, "Templates");
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { templatedirs = new noarrow_Fl_Input(35, 77, 505, 24, "Template Directories:");
          templatedirs->box(FL_DOWN_BOX);
          templatedirs->color(FL_BACKGROUND2_COLOR);
          templatedirs->selection_color(FL_SELECTION_COLOR);
          templatedirs->labeltype(FL_NORMAL_LABEL);
          templatedirs->labelfont(0);
          templatedirs->labelsize(14);
          templatedirs->labelcolor(FL_FOREGROUND_COLOR);
          templatedirs->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          templatedirs->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* templatedirs
        { Fl_Box* o = new Fl_Box(35, 112, 510, 63, "Semicolon separated list of directories that are searched for template files \
for the menu item \"File/New from Template\". Files will be listed in the orde\
r of the template directories.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { exampledirs = new noarrow_Fl_Input(35, 207, 505, 24, "Example Directories:");
          exampledirs->box(FL_DOWN_BOX);
          exampledirs->color(FL_BACKGROUND2_COLOR);
          exampledirs->selection_color(FL_SELECTION_COLOR);
          exampledirs->labeltype(FL_NORMAL_LABEL);
          exampledirs->labelfont(0);
          exampledirs->labelsize(14);
          exampledirs->labelcolor(FL_FOREGROUND_COLOR);
          exampledirs->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          exampledirs->when(FL_WHEN_RELEASE);
        } // noarrow_Fl_Input* exampledirs
        { Fl_Box* o = new Fl_Box(35, 242, 510, 63, "Semicolon separated list of directories that are searched for example files f\
or the menu item \"File/Open Example\". Files will be listed in the order of t\
he example directories.");
          o->labelfont(2);
          o->align(Fl_Align(133|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

OptionsSystem_msk::~OptionsSystem_msk() {
  delete window;
}

void OptionsSystem_msk::buttonquit_cb() {
  window->hide();
}

void OptionsSystem_msk::show() {
  window->show();
}

void AbcFormatList_msk::cb_Copy_i(Fl_Button*, void*) {
  buttoncopy_cb();
}
void AbcFormatList_msk::cb_Copy(Fl_Button* o, void* v) {
  ((AbcFormatList_msk*)(o->parent()->parent()->user_data()))->cb_Copy_i(o,v);
}

void AbcFormatList_msk::cb_Close_i(Fl_Button*, void*) {
  buttonclose_cb();
}
void AbcFormatList_msk::cb_Close(Fl_Button* o, void* v) {
  ((AbcFormatList_msk*)(o->parent()->parent()->user_data()))->cb_Close_i(o,v);
}

AbcFormatList_msk::AbcFormatList_msk(MainWin* mw) {
  { window = new Fl_Double_Window(458, 421, "Abc Format Parameters");
    window->user_data((void*)(this));
    { browser = new Fl_Multi_Browser(25, 20, 410, 320);
      browser->box(FL_NO_BOX);
      browser->color(FL_BACKGROUND2_COLOR);
      browser->selection_color(FL_SELECTION_COLOR);
      browser->labeltype(FL_NORMAL_LABEL);
      browser->labelfont(0);
      browser->labelsize(14);
      browser->labelcolor(FL_FOREGROUND_COLOR);
      browser->textfont(4);
      browser->align(Fl_Align(FL_ALIGN_BOTTOM));
      browser->when(FL_WHEN_RELEASE_ALWAYS);
      Fl_Group::current()->resizable(browser);
    } // Fl_Multi_Browser* browser
    { Fl_Group* o = new Fl_Group(0, 353, 455, 68);
      { Fl_Button* o = new Fl_Button(55, 361, 145, 39, "Copy to Clipboard");
        o->shortcut(0x40063);
        o->callback((Fl_Callback*)cb_Copy);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 363, 90, 37, "Close");
        o->callback((Fl_Callback*)cb_Close);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

AbcFormatList_msk::~AbcFormatList_msk() {
  delete window;
}

void AbcFormatList_msk::buttonclose_cb() {
  window->hide();
}

void AbcFormatList_msk::show() {
  window->show();
}

void MidiList_msk::cb_commoninstruments_i(Fl_Round_Button*, void*) {
  buttoncommoninstruments_cb();
}
void MidiList_msk::cb_commoninstruments(Fl_Round_Button* o, void* v) {
  ((MidiList_msk*)(o->parent()->parent()->user_data()))->cb_commoninstruments_i(o,v);
}

void MidiList_msk::cb_allinstruments_i(Fl_Round_Button*, void*) {
  buttonallinstruments_cb();
}
void MidiList_msk::cb_allinstruments(Fl_Round_Button* o, void* v) {
  ((MidiList_msk*)(o->parent()->parent()->user_data()))->cb_allinstruments_i(o,v);
}

void MidiList_msk::cb_Copy1_i(Fl_Button*, void*) {
  buttoncopy_cb();
}
void MidiList_msk::cb_Copy1(Fl_Button* o, void* v) {
  ((MidiList_msk*)(o->parent()->parent()->user_data()))->cb_Copy1_i(o,v);
}

void MidiList_msk::cb_Close1_i(Fl_Button*, void*) {
  buttonclose_cb();
}
void MidiList_msk::cb_Close1(Fl_Button* o, void* v) {
  ((MidiList_msk*)(o->parent()->parent()->user_data()))->cb_Close1_i(o,v);
}

MidiList_msk::MidiList_msk(MainWin* mw) {
  { window = new Fl_Double_Window(460, 448, "Midi Instruments");
    window->user_data((void*)(this));
    { browser = new Fl_Multi_Browser(25, 20, 410, 320);
      browser->box(FL_NO_BOX);
      browser->color(FL_BACKGROUND2_COLOR);
      browser->selection_color(FL_SELECTION_COLOR);
      browser->labeltype(FL_NORMAL_LABEL);
      browser->labelfont(0);
      browser->labelsize(14);
      browser->labelcolor(FL_FOREGROUND_COLOR);
      browser->textfont(4);
      browser->align(Fl_Align(FL_ALIGN_BOTTOM));
      browser->when(FL_WHEN_RELEASE_ALWAYS);
      Fl_Group::current()->resizable(browser);
    } // Fl_Multi_Browser* browser
    { Fl_Group* o = new Fl_Group(0, 352, 460, 96);
      { Fl_Box* o = new Fl_Box(88, 356, 140, 18, "Show Instruments:");
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { commoninstruments = new Fl_Round_Button(224, 355, 79, 20, "common");
        commoninstruments->type(102);
        commoninstruments->down_box(FL_ROUND_DOWN_BOX);
        commoninstruments->callback((Fl_Callback*)cb_commoninstruments);
      } // Fl_Round_Button* commoninstruments
      { allinstruments = new Fl_Round_Button(314, 355, 69, 20, "all");
        allinstruments->type(102);
        allinstruments->down_box(FL_ROUND_DOWN_BOX);
        allinstruments->callback((Fl_Callback*)cb_allinstruments);
      } // Fl_Round_Button* allinstruments
      { Fl_Button* o = new Fl_Button(55, 391, 145, 35, "Copy to Clipboard");
        o->shortcut(0x40063);
        o->callback((Fl_Callback*)cb_Copy1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 391, 90, 35, "Close");
        o->callback((Fl_Callback*)cb_Close1);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

MidiList_msk::~MidiList_msk() {
  delete window;
}

void MidiList_msk::buttonclose_cb() {
  window->hide();
}

void MidiList_msk::show() {
  window->show();
}

void CommandOutput_msk::cb_Goto_i(Fl_Button*, void*) {
  buttonnexterror_cb();
}
void CommandOutput_msk::cb_Goto(Fl_Button* o, void* v) {
  ((CommandOutput_msk*)(o->parent()->parent()->user_data()))->cb_Goto_i(o,v);
}

void CommandOutput_msk::cb_Close2_i(Fl_Button*, void*) {
  buttonclose_cb();
}
void CommandOutput_msk::cb_Close2(Fl_Button* o, void* v) {
  ((CommandOutput_msk*)(o->parent()->parent()->user_data()))->cb_Close2_i(o,v);
}

CommandOutput_msk::CommandOutput_msk(MainWin* mw) {
  { window = new Fl_Double_Window(699, 346, "Last Command Output");
    window->user_data((void*)(this));
    { browser = new Fl_Hold_Browser(25, 20, 650, 250);
      browser->box(FL_NO_BOX);
      browser->color(FL_BACKGROUND2_COLOR);
      browser->selection_color(FL_SELECTION_COLOR);
      browser->labeltype(FL_NORMAL_LABEL);
      browser->labelfont(0);
      browser->labelsize(14);
      browser->labelcolor(FL_FOREGROUND_COLOR);
      browser->textfont(4);
      browser->align(Fl_Align(FL_ALIGN_BOTTOM));
      browser->when(FL_WHEN_RELEASE_ALWAYS);
      Fl_Group::current()->resizable(browser);
    } // Fl_Hold_Browser* browser
    { Fl_Group* o = new Fl_Group(0, 277, 700, 68);
      { Fl_Button* o = new Fl_Button(55, 288, 145, 39, "Goto next Error");
        o->callback((Fl_Callback*)cb_Goto);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(500, 290, 90, 37, "Close");
        o->callback((Fl_Callback*)cb_Close2);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

CommandOutput_msk::~CommandOutput_msk() {
  delete window;
}

void CommandOutput_msk::buttonclose_cb() {
  window->hide();
}

void CommandOutput_msk::show() {
  window->show();
}

#include <FL/Fl_Pixmap.H>
static const char *idata_logoround[] = {
"68 66 6 1",
". c #0000d1",
"X c #00b000",
"o c #d10000",
"O c #aeaeae",
"+ c #ffffffffffff",
"@ c None",
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@++++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@@@@@@++++++++++++++++++++@@@@@@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@@@++++++++++++++++++++++++++@@@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@++++++++++++++++++++++++++++++++++++++@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@@@@@",
"@@@@@@@@@@@@++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@@@",
"@@@@@@@@@@@++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@@",
"@@@@@@@@@@+++++++++++OOOOOO+++++++++++++++++++++++++++++++@@@@@@@@@@",
"@@@@@@@@@+++++++++++OOOOOOO++++++++++++++++++++++++++++++++@@@@@@@@@",
"@@@@@@@@+++++++++++OOOOOOOOO++++++++++++++++++++++++++++++++@@@@@@@@",
"@@@@@@@+++++++++++OOOOOOOOOO+++++++++++++++++++++++++++++++++@@@@@@@",
"@@@@@@@++++++++++OOOOOOOOOOOO++++++++++++++++++++++++++++++++@@@@@@@",
"@@@@@@+++++++++++OOOOOOOOOOOO+++++++++++++++++++++++++++++++++@@@@@@",
"@@@@@++++++++++++OOOOOOOOOOOO++++++++++++++++++......O+++++++++@@@@@",
"@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO...OO....OOOOOOOO@@@@@",
"@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO...OOO....OOOOOOOOO@@@@",
"@@@+++++++++++++OOOOOOOOOOOO++++++++++++++++....OOO.....+++++++++@@@",
"@@@++++++++++XXXXXXXOOOOOOO++++++++++++++++....OOOO....OO++++++++@@@",
"@@@+++++++++XX++OXXXXXOOOOO++++++++++++++++....OOOOOO.OOO++++++++@@@",
"@@+++++++++XXX++OOXXXXXOOO+++++++++++++++++....OOOOOOOOOO+++++++++@@",
"@@++++++++XXXXX+OOXXXXXO+++++++++++++++++++....OOOOOOOOOO+++++++++@@",
"@+++++++++XXXXX+OOXXXXX++++++++++++++++++++....OOOOOOOOO+++++++++++@",
"@++++++++++XXX++OOXXXXX++++++++++++++++++++.....OOOOOOOO+++++++++++@",
"@+++++++++++++++XXXXXXX++++ooooooo+++++++++.....OOOOOOOO+++++++++++@",
"@+++++++++++++XXXX+XXXX+++++oooooo++++++++++.....OOOOOO++++++++++++@",
"++++++++++++XXXXOO+XXXX+++++++oooo++++++++++......OOOO..++++++++++++",
"+++++++++++XXXX+OO+XXXX+++++++oooo++++++++++O..........+++++++++++++",
"OOOOOOOOOOXXXXOOOOOXXXXOOOOOOOooooOOOOOOOOOOOOO......OOOOOOOOOOOOOOO",
"OOOOOOOOOOXXXXOOOOOXXXXOOOOOOOooooOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO",
"++++++++++XXXXX+OOXXXXX+++++++oooo++++++++++OO++++++++++++++++++++++",
"++++++++++XXXXXXXXXXXXXXX+++++oooo+ooooo++++OO++++++++++++++++++++++",
"+++++++++++XXXXXOO+XXXXX++++++ooooooooooo+++OO++++++++++++++++++++++",
"++++++++++++++++OO++++++++++++ooooo++ooooo++OO++++++++++++++++++++++",
"++++++++++++++++OO++++++++++++oooo++++oooo++OO++++++++++++++++++++++",
"++++++++++++++++OO++++++++++++oooo++++ooooo+OO++++++++++++++++++++++",
"++++++++++++++++OO++++++++++++oooo+++++oooo+OO++++++++++++++++++++++",
"++++++++++++++++OO++++++++++++oooo+++++oooo+OO++++++++++++++++++++++",
"@+++++++++++++++OO++++++++++++oooo+++++oooo+OO+++++++++++++++++++++@",
"@+++++++++++++++OO++++++++++++oooo+++++oooo+OO+++++++++++++++++++++@",
"@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOooooOOOOOooooOOOOOOOOOOOOOOOOOOOOOOOO@",
"@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOooooOOOOOooooOOOOOOOOOOOOOOOOOOOOOOOO@",
"@@++++++++++++++OO++++++++++++oooo++++oooo++OO++++++++++++++++++++@@",
"@@++++++++++++++OO++++++++++++oooo++++oooo++OO++++++++++++++++++++@@",
"@@@+++++++++++++OO++++++++++++ooooo++oooo+++OO+++++++++++++++++++@@@",
"@@@+++++++++++++OO++++++++++++o++oooooo+++++OO+++++++++++++++++++@@@",
"@@@+++++++++++++OO++++++++++++++++++++++++++OO+++++++++++++++++++@@@",
"@@@@++++++++++++OO++++++++++++++++++++++++++OO++++++++++++++++++@@@@",
"@@@@@+++++++++++OO++++++++++++++++++++++++++OO+++++++++++++++++@@@@@",
"@@@@@+++++++++++OO++++++++++++++++++++++++++OO+++++++++++++++++@@@@@",
"@@@@@@++++++++++OO++++++++++++++++++++++++++OO++++++++++++++++@@@@@@",
"@@@@@@@+++++++++OO++++++++++++++++++++++++++OO+++++++++++++++@@@@@@@",
"@@@@@@@+++++++++OO++++++++++++++++++++++++++OO+++++++++++++++@@@@@@@",
"@@@@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@",
"@@@@@@@@@OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@",
"@@@@@@@@@@++++++OOOOOOOOOOOOOOOO++++++++++++OO++++++++++++@@@@@@@@@@",
"@@@@@@@@@@@+++++OOOOOOOOOOOOOOOOOOOOOO++++++OO+++++++++++@@@@@@@@@@@",
"@@@@@@@@@@@@++++OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO++++++++++@@@@@@@@@@@@",
"@@@@@@@@@@@@@@++OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO++++++++@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@+++++OOOOOOOOOOOOOOOOOOOOOOOOOO+++++++@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@+++++++++OOOOOOOOOOOOOOOOOOOO+++++@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@+++++++++++++OOOOOOOOOOOOOO+++@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@@@+++++++++++++++++OOOOOOOO+@@@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@@@@@@++++++++++++++++++++@@@@@@@@@@@@@@@@@@@@@@@@",
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@++++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
};
static Fl_Image *image_logoround() {
  static Fl_Image *image = new Fl_Pixmap(idata_logoround);
  return image;
}

void HelpAbout_msk::cb_Close3_i(Fl_Return_Button*, void*) {
  buttonclose_cb();
}
void HelpAbout_msk::cb_Close3(Fl_Return_Button* o, void* v) {
  ((HelpAbout_msk*)(o->parent()->user_data()))->cb_Close3_i(o,v);
}

void HelpAbout_msk::cb_View_i(Fl_Button*, void*) {
  buttonlicense_cb();
}
void HelpAbout_msk::cb_View(Fl_Button* o, void* v) {
  ((HelpAbout_msk*)(o->parent()->user_data()))->cb_View_i(o,v);
}

HelpAbout_msk::HelpAbout_msk(MainWin* mw) {
  { window = new Fl_Double_Window(375, 375, "About flabc");
    window->user_data((void*)(this));
    { logo = new Fl_Box(25, 19, 125, 108);
      logo->image( image_logoround() );
    } // Fl_Box* logo
    { Fl_Box* o = new Fl_Box(185, 13, 90, 21, "flabc");
      o->labelfont(1);
      o->labelsize(16);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(185, 34, 70, 22, "Version");
      o->labelfont(1);
      o->labelsize(16);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { version = new Fl_Box(260, 34, 70, 21, "x.y.z");
      version->labelfont(1);
      version->labelsize(16);
      version->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* version
    { versiondate = new Fl_Box(185, 56, 125, 21, "(1. Jan 1567)");
      versiondate->labelfont(1);
      versiondate->labelsize(16);
      versiondate->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* versiondate
    { Fl_Box* o = new Fl_Box(185, 84, 165, 22, "Copyright 2006-2020");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(185, 104, 170, 22, "by Christoph Dalitz");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(22, 137, 338, 23, "flabc is based in part on the work of the FLTK");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(22, 156, 343, 22, "project (www.fltk.org). The current installation");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(22, 177, 343, 22, "calls the following additional external software:");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { abctab2ps = new Fl_Output(98, 208, 242, 22, "abctab2ps:");
    } // Fl_Output* abctab2ps
    { abcm2ps = new Fl_Output(98, 238, 242, 22, "abcm2ps:");
    } // Fl_Output* abcm2ps
    { abc2midi = new Fl_Output(98, 270, 242, 22, "abc2midi:");
    } // Fl_Output* abc2midi
    { Fl_Return_Button* o = new Fl_Return_Button(216, 311, 110, 35, "Close");
      o->callback((Fl_Callback*)cb_Close3);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(51, 311, 110, 35, "View License");
      o->callback((Fl_Callback*)cb_View);
    } // Fl_Button* o
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

HelpAbout_msk::~HelpAbout_msk() {
  delete window;
}

void HelpAbout_msk::buttonclose_cb() {
  window->hide();
}

void HelpAbout_msk::show() {
  window->show();
}

void GotoLine_msk::cb_window_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void GotoLine_msk::cb_window(Fl_Double_Window* o, void* v) {
  ((GotoLine_msk*)(o->user_data()))->cb_window_i(o,v);
}

void GotoLine_msk::cb_ok_i(Fl_Return_Button*, void*) {
  buttonok_cb();
}
void GotoLine_msk::cb_ok(Fl_Return_Button* o, void* v) {
  ((GotoLine_msk*)(o->parent()->user_data()))->cb_ok_i(o,v);
}

void GotoLine_msk::cb_cancel_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void GotoLine_msk::cb_cancel(Fl_Button* o, void* v) {
  ((GotoLine_msk*)(o->parent()->user_data()))->cb_cancel_i(o,v);
}

GotoLine_msk::GotoLine_msk(MainWin* mw) {
  { window = new Fl_Double_Window(257, 128, "Goto Line/Column");
    window->callback((Fl_Callback*)cb_window, (void*)(this));
    { line = new Fl_Int_Input(53, 16, 47, 27, "Line:");
      line->box(FL_DOWN_BOX);
      line->color(FL_BACKGROUND2_COLOR);
      line->selection_color(FL_SELECTION_COLOR);
      line->labeltype(FL_NORMAL_LABEL);
      line->labelfont(0);
      line->labelsize(14);
      line->labelcolor(FL_FOREGROUND_COLOR);
      line->align(Fl_Align(FL_ALIGN_LEFT));
      line->when(FL_WHEN_RELEASE);
    } // Fl_Int_Input* line
    { column = new Fl_Int_Input(172, 16, 48, 27, "Column:");
      column->box(FL_DOWN_BOX);
      column->color(FL_BACKGROUND2_COLOR);
      column->selection_color(FL_SELECTION_COLOR);
      column->labeltype(FL_NORMAL_LABEL);
      column->labelfont(0);
      column->labelsize(14);
      column->labelcolor(FL_FOREGROUND_COLOR);
      column->align(Fl_Align(FL_ALIGN_LEFT));
      column->when(FL_WHEN_RELEASE);
    } // Fl_Int_Input* column
    { ok = new Fl_Return_Button(44, 64, 65, 36, "Ok");
      ok->callback((Fl_Callback*)cb_ok);
    } // Fl_Return_Button* ok
    { cancel = new Fl_Button(156, 65, 64, 35, "Cancel");
      cancel->shortcut(0xff1b);
      cancel->callback((Fl_Callback*)cb_cancel);
    } // Fl_Button* cancel
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  buttonpressed = 0;
}

GotoLine_msk::~GotoLine_msk() {
  delete window;
}

void GotoLine_msk::buttonok_cb() {
  buttonpressed = 1;
  window->hide();
}

void GotoLine_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}

void GotoBar_msk::cb_window1_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void GotoBar_msk::cb_window1(Fl_Double_Window* o, void* v) {
  ((GotoBar_msk*)(o->user_data()))->cb_window1_i(o,v);
}

void GotoBar_msk::cb_ok1_i(Fl_Return_Button*, void*) {
  buttonok_cb();
}
void GotoBar_msk::cb_ok1(Fl_Return_Button* o, void* v) {
  ((GotoBar_msk*)(o->parent()->user_data()))->cb_ok1_i(o,v);
}

void GotoBar_msk::cb_cancel1_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void GotoBar_msk::cb_cancel1(Fl_Button* o, void* v) {
  ((GotoBar_msk*)(o->parent()->user_data()))->cb_cancel1_i(o,v);
}

GotoBar_msk::GotoBar_msk(MainWin* mw) {
  { window = new Fl_Double_Window(355, 149, "Goto Bar/Voice/Tune");
    window->callback((Fl_Callback*)cb_window1, (void*)(this));
    { bar = new Fl_Int_Input(53, 16, 47, 27, "Bar:");
      bar->box(FL_DOWN_BOX);
      bar->color(FL_BACKGROUND2_COLOR);
      bar->selection_color(FL_SELECTION_COLOR);
      bar->labeltype(FL_NORMAL_LABEL);
      bar->labelfont(0);
      bar->labelsize(14);
      bar->labelcolor(FL_FOREGROUND_COLOR);
      bar->align(Fl_Align(FL_ALIGN_LEFT));
      bar->when(FL_WHEN_RELEASE);
    } // Fl_Int_Input* bar
    { voice = new Fl_Input(159, 16, 48, 27, "Voice:");
    } // Fl_Input* voice
    { tune = new Fl_Input(270, 17, 48, 27, "Tune:");
    } // Fl_Input* tune
    { ok = new Fl_Return_Button(86, 91, 65, 36, "Ok");
      ok->callback((Fl_Callback*)cb_ok1);
    } // Fl_Return_Button* ok
    { cancel = new Fl_Button(213, 92, 64, 35, "Cancel");
      cancel->shortcut(0xff1b);
      cancel->callback((Fl_Callback*)cb_cancel1);
    } // Fl_Button* cancel
    { Fl_Box* o = new Fl_Box(21, 55, 312, 22, "Note: Bar finding does not take care of pickups");
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  buttonpressed = 0;
}

GotoBar_msk::~GotoBar_msk() {
  delete window;
}

void GotoBar_msk::buttonok_cb() {
  buttonpressed = 1;
  window->hide();
}

void GotoBar_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}

void Search_msk::cb_window2_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void Search_msk::cb_window2(Fl_Double_Window* o, void* v) {
  ((Search_msk*)(o->user_data()))->cb_window2_i(o,v);
}

void Search_msk::cb_ok2_i(Fl_Return_Button*, void*) {
  buttonok_cb();
}
void Search_msk::cb_ok2(Fl_Return_Button* o, void* v) {
  ((Search_msk*)(o->parent()->user_data()))->cb_ok2_i(o,v);
}

void Search_msk::cb_cancel2_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void Search_msk::cb_cancel2(Fl_Button* o, void* v) {
  ((Search_msk*)(o->parent()->user_data()))->cb_cancel2_i(o,v);
}

Search_msk::Search_msk(MainWin* mw) {
  { window = new Fl_Double_Window(265, 165, "Find");
    window->callback((Fl_Callback*)cb_window2, (void*)(this));
    { text = new Fl_Input(25, 30, 215, 27, "Search string:");
      text->textfont(4);
      text->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input* text
    { casesensitive = new Fl_Check_Button(25, 70, 115, 25, "Case sensitive");
      casesensitive->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* casesensitive
    { regexp = new Fl_Check_Button(155, 71, 85, 25, "Regexp");
      regexp->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* regexp
    { ok = new Fl_Return_Button(44, 110, 65, 36, "Ok");
      ok->callback((Fl_Callback*)cb_ok2);
    } // Fl_Return_Button* ok
    { cancel = new Fl_Button(156, 111, 64, 35, "Cancel");
      cancel->shortcut(0xff1b);
      cancel->callback((Fl_Callback*)cb_cancel2);
    } // Fl_Button* cancel
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  buttonpressed = 0;
}

Search_msk::~Search_msk() {
  delete window;
}

void Search_msk::buttonok_cb() {
  buttonpressed = 1;
  window->hide();
}

void Search_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}

void Replace_msk::cb_window3_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void Replace_msk::cb_window3(Fl_Double_Window* o, void* v) {
  ((Replace_msk*)(o->user_data()))->cb_window3_i(o,v);
}

void Replace_msk::cb_search_i(Fl_Return_Button*, void*) {
  buttonsearch_cb();
}
void Replace_msk::cb_search(Fl_Return_Button* o, void* v) {
  ((Replace_msk*)(o->parent()->user_data()))->cb_search_i(o,v);
}

void Replace_msk::cb_replace_i(Fl_Button*, void*) {
  buttonreplace_cb();
}
void Replace_msk::cb_replace(Fl_Button* o, void* v) {
  ((Replace_msk*)(o->parent()->user_data()))->cb_replace_i(o,v);
}

void Replace_msk::cb_replaceall_i(Fl_Button*, void*) {
  buttonreplaceall_cb();
}
void Replace_msk::cb_replaceall(Fl_Button* o, void* v) {
  ((Replace_msk*)(o->parent()->user_data()))->cb_replaceall_i(o,v);
}

Replace_msk::Replace_msk(MainWin* mw) {
  { window = new Fl_Double_Window(285, 145, "Replace");
    window->callback((Fl_Callback*)cb_window3, (void*)(this));
    { searchtext = new Fl_Input(75, 13, 190, 23, "Search:");
      searchtext->textfont(4);
    } // Fl_Input* searchtext
    { replacetext = new Fl_Input(75, 42, 190, 23, "Replace:");
      replacetext->textfont(4);
    } // Fl_Input* replacetext
    { casesensitive = new Fl_Check_Button(75, 75, 115, 25, "Case sensitive");
      casesensitive->down_box(FL_DOWN_BOX);
      casesensitive->value(1);
    } // Fl_Check_Button* casesensitive
    { regexp = new Fl_Check_Button(200, 75, 85, 25, "Regexp");
      regexp->down_box(FL_DOWN_BOX);
      regexp->deactivate();
    } // Fl_Check_Button* regexp
    { search = new Fl_Return_Button(17, 106, 80, 30, "&Search");
      search->callback((Fl_Callback*)cb_search);
    } // Fl_Return_Button* search
    { replace = new Fl_Button(107, 106, 70, 30, "&Replace");
      replace->callback((Fl_Callback*)cb_replace);
    } // Fl_Button* replace
    { replaceall = new Fl_Button(187, 106, 85, 30, "Replace &all");
      replaceall->callback((Fl_Callback*)cb_replaceall);
    } // Fl_Button* replaceall
    window->set_non_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
}

Replace_msk::~Replace_msk() {
  delete window;
}

void Replace_msk::buttoncancel_cb() {
  window->hide();
}

void Replace_msk::show() {
  window->show();
}

void TextViewer_msk::cb_Close4_i(Fl_Return_Button*, void*) {
  buttonclose_cb();
}
void TextViewer_msk::cb_Close4(Fl_Return_Button* o, void* v) {
  ((TextViewer_msk*)(o->parent()->user_data()))->cb_Close4_i(o,v);
}

TextViewer_msk::TextViewer_msk(MainWin* mw) {
  { window = new Fl_Double_Window(599, 603, "TextViewer");
    window->user_data((void*)(this));
    { Fl_Return_Button* o = new Fl_Return_Button(268, 552, 81, 35, "Close");
      o->callback((Fl_Callback*)cb_Close4);
    } // Fl_Return_Button* o
    { textdisplay = new Fl_Text_Display(15, 15, 570, 520);
      textdisplay->textfont(4);
      Fl_Group::current()->resizable(textdisplay);
    } // Fl_Text_Display* textdisplay
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  textdisplay->buffer(&textbuffer);
}

TextViewer_msk::~TextViewer_msk() {
  delete window;
}

void TextViewer_msk::buttonclose_cb() {
  window->hide();
}

void TextViewer_msk::show() {
  window->show();
}

void TemplatePicker_msk::cb_window4_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void TemplatePicker_msk::cb_window4(Fl_Double_Window* o, void* v) {
  ((TemplatePicker_msk*)(o->user_data()))->cb_window4_i(o,v);
}

void TemplatePicker_msk::cb_browser_i(Fl_Hold_Browser*, void*) {
  if (Fl::event_clicks())
  buttonload_cb();
}
void TemplatePicker_msk::cb_browser(Fl_Hold_Browser* o, void* v) {
  ((TemplatePicker_msk*)(o->parent()->user_data()))->cb_browser_i(o,v);
}

void TemplatePicker_msk::cb_Cancel_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void TemplatePicker_msk::cb_Cancel(Fl_Button* o, void* v) {
  ((TemplatePicker_msk*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void TemplatePicker_msk::cb_buttonload_i(Fl_Return_Button*, void*) {
  buttonload_cb();
}
void TemplatePicker_msk::cb_buttonload(Fl_Return_Button* o, void* v) {
  ((TemplatePicker_msk*)(o->parent()->user_data()))->cb_buttonload_i(o,v);
}

TemplatePicker_msk::TemplatePicker_msk(MainWin* mw) {
  { window = new Fl_Double_Window(459, 444, "New from Template");
    window->callback((Fl_Callback*)cb_window4, (void*)(this));
    { browser = new Fl_Hold_Browser(25, 20, 410, 305);
      browser->box(FL_NO_BOX);
      browser->color(FL_BACKGROUND2_COLOR);
      browser->selection_color(FL_SELECTION_COLOR);
      browser->labeltype(FL_NORMAL_LABEL);
      browser->labelfont(0);
      browser->labelsize(14);
      browser->labelcolor(FL_FOREGROUND_COLOR);
      browser->textfont(4);
      browser->callback((Fl_Callback*)cb_browser);
      browser->align(Fl_Align(FL_ALIGN_BOTTOM));
      browser->when(FL_WHEN_RELEASE_ALWAYS);
      Fl_Group::current()->resizable(browser);
    } // Fl_Hold_Browser* browser
    { Fl_Button* o = new Fl_Button(290, 391, 90, 35, "Cancel");
      o->shortcut(0xff1b);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { buttonload = new Fl_Return_Button(70, 391, 150, 35, "Load Template");
      buttonload->callback((Fl_Callback*)cb_buttonload);
    } // Fl_Return_Button* buttonload
    { boxhint = new Fl_Box(25, 338, 410, 37, "Hint: You can customize template directories with the tab \"Templates\" in \"\
Options/System Environment\"");
      boxhint->labelfont(2);
      boxhint->align(Fl_Align(132|FL_ALIGN_INSIDE));
    } // Fl_Box* boxhint
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  buttonpressed = 0;
}

TemplatePicker_msk::~TemplatePicker_msk() {
  delete window;
}

void TemplatePicker_msk::buttonload_cb() {
  buttonpressed = 1;
  window->hide();
}

void TemplatePicker_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}

void FontPicker_msk::cb_window5_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void FontPicker_msk::cb_window5(Fl_Double_Window* o, void* v) {
  ((FontPicker_msk*)(o->user_data()))->cb_window5_i(o,v);
}

void FontPicker_msk::cb_fontbrowser_i(Fl_Hold_Browser*, void*) {
  fontbrowser_cb();
}
void FontPicker_msk::cb_fontbrowser(Fl_Hold_Browser* o, void* v) {
  ((FontPicker_msk*)(o->parent()->user_data()))->cb_fontbrowser_i(o,v);
}

void FontPicker_msk::cb_sizebrowser_i(Fl_Hold_Browser*, void*) {
  sizebrowser_cb();
}
void FontPicker_msk::cb_sizebrowser(Fl_Hold_Browser* o, void* v) {
  ((FontPicker_msk*)(o->parent()->user_data()))->cb_sizebrowser_i(o,v);
}

void FontPicker_msk::cb_ok3_i(Fl_Return_Button*, void*) {
  buttonok_cb();
}
void FontPicker_msk::cb_ok3(Fl_Return_Button* o, void* v) {
  ((FontPicker_msk*)(o->parent()->user_data()))->cb_ok3_i(o,v);
}

void FontPicker_msk::cb_cancel3_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void FontPicker_msk::cb_cancel3(Fl_Button* o, void* v) {
  ((FontPicker_msk*)(o->parent()->user_data()))->cb_cancel3_i(o,v);
}

FontPicker_msk::FontPicker_msk() {
  { window = new Fl_Double_Window(399, 402, "Choose Font");
    window->callback((Fl_Callback*)cb_window5, (void*)(this));
    { fontbrowser = new Fl_Hold_Browser(17, 15, 283, 165);
      fontbrowser->box(FL_NO_BOX);
      fontbrowser->color(FL_BACKGROUND2_COLOR);
      fontbrowser->selection_color(FL_SELECTION_COLOR);
      fontbrowser->labeltype(FL_NORMAL_LABEL);
      fontbrowser->labelfont(0);
      fontbrowser->labelsize(14);
      fontbrowser->labelcolor(FL_FOREGROUND_COLOR);
      fontbrowser->callback((Fl_Callback*)cb_fontbrowser);
      fontbrowser->align(Fl_Align(FL_ALIGN_BOTTOM));
      fontbrowser->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Hold_Browser* fontbrowser
    { sizebrowser = new Fl_Hold_Browser(315, 15, 70, 165);
      sizebrowser->box(FL_NO_BOX);
      sizebrowser->color(FL_BACKGROUND2_COLOR);
      sizebrowser->selection_color(FL_SELECTION_COLOR);
      sizebrowser->labeltype(FL_NORMAL_LABEL);
      sizebrowser->labelfont(0);
      sizebrowser->labelsize(14);
      sizebrowser->labelcolor(FL_FOREGROUND_COLOR);
      sizebrowser->callback((Fl_Callback*)cb_sizebrowser);
      sizebrowser->align(Fl_Align(FL_ALIGN_BOTTOM));
      sizebrowser->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Hold_Browser* sizebrowser
    { displaybox = new Fl_Box(16, 190, 370, 149, "font display");
      displaybox->box(FL_DOWN_BOX);
      displaybox->align(Fl_Align(69|FL_ALIGN_INSIDE));
    } // Fl_Box* displaybox
    { ok = new Fl_Return_Button(89, 352, 65, 36, "Ok");
      ok->callback((Fl_Callback*)cb_ok3);
    } // Fl_Return_Button* ok
    { cancel = new Fl_Button(253, 352, 64, 36, "Cancel");
      cancel->shortcut(0xff1b);
      cancel->callback((Fl_Callback*)cb_cancel3);
    } // Fl_Button* cancel
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  buttonpressed = 0;
}

FontPicker_msk::~FontPicker_msk() {
  delete window;
}

void FontPicker_msk::buttonok_cb() {
  buttonpressed = 1;
  window->hide();
}

void FontPicker_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}

void FixupXrefs_msk::cb_window6_i(Fl_Double_Window*, void*) {
  buttoncancel_cb();
}
void FixupXrefs_msk::cb_window6(Fl_Double_Window* o, void* v) {
  ((FixupXrefs_msk*)(o->user_data()))->cb_window6_i(o,v);
}

void FixupXrefs_msk::cb_ok4_i(Fl_Return_Button*, void*) {
  buttonok_cb();
}
void FixupXrefs_msk::cb_ok4(Fl_Return_Button* o, void* v) {
  ((FixupXrefs_msk*)(o->parent()->user_data()))->cb_ok4_i(o,v);
}

void FixupXrefs_msk::cb_cancel4_i(Fl_Button*, void*) {
  buttoncancel_cb();
}
void FixupXrefs_msk::cb_cancel4(Fl_Button* o, void* v) {
  ((FixupXrefs_msk*)(o->parent()->user_data()))->cb_cancel4_i(o,v);
}

FixupXrefs_msk::FixupXrefs_msk(MainWin* mw) {
  { window = new Fl_Double_Window(273, 177, "Fixup Xrefs");
    window->callback((Fl_Callback*)cb_window6, (void*)(this));
    { consecutive = new Fl_Round_Button(25, 16, 195, 25, "consecutive renumbering");
      consecutive->type(102);
      consecutive->down_box(FL_ROUND_DOWN_BOX);
    } // Fl_Round_Button* consecutive
    { allowgaps = new Fl_Round_Button(25, 63, 225, 24, "allow gaps and non digit postfix");
      allowgaps->type(102);
      allowgaps->down_box(FL_ROUND_DOWN_BOX);
    } // Fl_Round_Button* allowgaps
    { ok = new Fl_Return_Button(43, 121, 65, 36, "Ok");
      ok->callback((Fl_Callback*)cb_ok4);
    } // Fl_Return_Button* ok
    { cancel = new Fl_Button(166, 122, 64, 35, "Cancel");
      cancel->shortcut(0xff1b);
      cancel->callback((Fl_Callback*)cb_cancel4);
    } // Fl_Button* cancel
    { Fl_Box* o = new Fl_Box(40, 39, 180, 16, "(starts with first X-number)");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(40, 87, 225, 16, "(only changes decreasing values)");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    window->set_modal();
    window->end();
  } // Fl_Double_Window* window
  mainwin = mw;
  consecutive->value(1);
  buttonpressed = 0;
}

FixupXrefs_msk::~FixupXrefs_msk() {
  delete window;
}

void FixupXrefs_msk::buttonok_cb() {
  buttonpressed = 1;
  window->hide();
}

void FixupXrefs_msk::buttoncancel_cb() {
  buttonpressed = 0;
  window->hide();
}
